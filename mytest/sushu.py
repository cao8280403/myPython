# 先构造一个从3开始的奇数序列：
def _odd_iter():
    n = 1
    while True:
        n = n + 2
        yield n


# 定义一个筛选函数：
def _not_divisible(n):
    return lambda x: x % n > 0


# 定义一个生成器，不断返回下一个素数：
def primes():
    yield 2
    it = _odd_iter()  # 初始序列
    while True:
        n = next(it)  # 返回序列的第一个数
        yield n
        it = filter(_not_divisible(n), it)  # 构造新序列


# 打印1000以内的素数:
for n in primes():
    if n < 1000:
        print(n)
    else:
        break

list = [1, 2, 3, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 7, 6, 7, 7, 7, 7, 8, 5, 5, 6, 7, 6, 7, 7, 5, 5, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 3, 4, 5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 13, 14, 14, 13, 14, 12, 13, 13, 13, 13, 13, 13, 13, 13, 9, 10, 10, 11, 12, 13, 13, 14, 14, 13, 14, 12, 13, 13, 13, 13, 13, 13, 13, 9, 9, 9, 5, 5, 6, 7, 6, 5, 6, 7, 8, 9, 9, 10, 10, 10, 10, 10, 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 9, 9, 10, 10, 10, 8, 9, 9, 10, 10, 10, 10, 3, 4, 5, 6, 7, 8, 9, 10, 11, 10, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 9, 10, 11, 10, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 9, 10, 11, 10, 11, 12, 11, 12, 11, 12, 11, 12, 8, 9, 9, 10, 9, 10, 10, 7, 8, 8, 9, 9, 10, 11, 12, 13, 12, 13, 14, 15, 13, 14, 15, 16, 16, 15, 16, 16, 15, 16, 16, 14, 15, 15, 15, 14, 15, 16, 16, 15, 16, 16, 15, 16, 14, 15, 16, 17, 17, 15, 16, 17, 17, 14, 15, 16, 17, 18, 17, 18, 18, 19, 19, 19, 19, 19, 17, 18, 10, 11, 12, 13, 12, 13, 14, 15, 13, 14, 15, 16, 16, 15, 16, 16, 15, 16, 16, 14, 15, 15, 15, 14, 15, 16, 16, 15, 16, 16, 15, 16, 14, 15, 16, 17, 17, 15, 16, 17, 17, 14, 15, 16, 17, 18, 17, 18, 18, 19, 19, 19, 19, 19, 17, 18, 10, 11, 12, 13, 12, 13, 14, 15, 13, 14, 15, 16, 16, 15, 16, 16, 15, 16, 16, 14, 15, 15, 15, 14, 15, 16, 16, 15, 16, 16, 15, 16, 14, 15, 16, 17, 17, 15, 16, 17, 17, 14, 15, 16, 17, 18, 17, 18, 18, 19, 19, 19, 19, 19, 17, 18, 10, 11, 12, 13, 12, 13, 14, 15, 13, 14, 15, 16, 16, 15, 16, 16, 15, 16, 16, 14, 15, 15, 15, 14, 15, 16, 16, 15, 16, 16, 15, 16, 14, 15, 16, 17, 17, 15, 16, 17, 17, 14, 15, 16, 17, 18, 17, 18, 18, 19, 19, 19, 19, 19, 17, 18, 10, 11, 12, 13, 12, 13, 14, 15, 13, 14, 15, 16, 16, 15, 16, 16, 15, 16, 16, 14, 15, 15, 15, 14, 15, 16, 16, 15, 16, 16, 15, 16, 14, 15, 16, 17, 17, 15, 16, 17, 17, 14, 15, 16, 17, 18, 17, 18, 18, 19, 19, 19, 19, 19, 17, 18, 10, 11, 12, 13, 12, 13, 14, 15, 13, 14, 15, 16, 16, 15, 16, 16, 15, 16, 16, 14, 15, 15, 15, 14, 15, 16, 16, 15, 16, 16, 15, 16, 14, 15, 16, 17, 17, 15, 16, 17, 17, 14, 15, 16, 17, 18, 17, 18, 18, 19, 19, 19, 19, 19, 17, 18, 10, 11, 12, 13, 12, 13, 14, 15, 13, 14, 15, 16, 16, 15, 16, 16, 15, 16, 16, 14, 15, 15, 15, 14, 15, 16, 16, 15, 16, 16, 15, 16, 17, 14, 15, 16, 17, 17, 15, 16, 17, 17, 14, 15, 16, 17, 18, 17, 18, 18, 19, 19, 19, 19, 19, 17, 18, 10, 11, 12, 13, 12, 13, 14, 15, 13, 14, 15, 16, 16, 15, 16, 16, 15, 16, 16, 14, 15, 15, 15, 14, 15, 16, 16, 15, 16, 16, 15, 16, 14, 15, 16, 17, 17, 15, 16, 17, 17, 14, 15, 16, 17, 18, 17, 18, 18, 19, 19, 19, 19, 19, 17, 18, 10, 11, 12, 13, 12, 13, 14, 15, 13, 14, 15, 16, 16, 15, 16, 16, 15, 16, 16, 14, 15, 15, 15, 14, 15, 16, 16, 15, 16, 16, 15, 16, 14, 15, 16, 17, 17, 15, 16, 17, 17, 14, 15, 16, 17, 18, 17, 18, 18, 19, 19, 19, 19, 19, 17, 18, 10, 11, 12, 13, 12, 13, 14, 15, 13, 14, 15, 16, 16, 15, 16, 16, 15, 16, 16, 14, 15, 15, 15, 14, 15, 16, 16, 15, 16, 16, 15, 16, 14, 15, 16, 17, 17, 15, 16, 17, 17, 14, 15, 16, 17, 18, 17, 18, 18, 19, 19, 19, 19, 19, 17, 18, 10, 11, 12, 13, 12, 13, 14, 15, 13, 14, 15, 16, 16, 15, 16, 16, 15, 16, 16, 14, 15, 15, 15, 14, 15, 16, 16, 15, 16, 16, 15, 16, 14, 15, 16, 17, 17, 15, 16, 17, 17, 14, 15, 16, 17, 18, 17, 18, 18, 19, 19, 19, 19, 19, 17, 18, 10, 11, 12, 13, 12, 13, 14, 15, 13, 14, 15, 16, 16, 15, 16, 16, 15, 16, 16, 14, 15, 15, 15, 14, 15, 16, 16, 15, 16, 16, 15, 16, 17, 14, 15, 16, 17, 17, 15, 16, 17, 17, 14, 15, 16, 17, 18, 17, 18, 18, 19, 19, 19, 19, 19, 17, 18, 10, 11, 12, 13, 12, 13, 14, 15, 13, 14, 15, 16, 16, 15, 16, 16, 15, 16, 16, 14, 15, 15, 15, 14, 15, 16, 16, 15, 16, 16, 15, 16, 14, 15, 16, 17, 17, 15, 16, 17, 17, 14, 15, 16, 17, 18, 17, 18, 18, 19, 19, 19, 19, 19, 17, 18, 10, 11, 12, 13, 12, 13, 14, 15, 13, 14, 15, 16, 16, 15, 16, 16, 15, 16, 16, 14, 15, 15, 15, 14, 15, 16, 16, 15, 16, 16, 15, 16, 14, 15, 16, 17, 17, 15, 16, 17, 17, 14, 15, 16, 17, 18, 17, 18, 18, 19, 19, 19, 19, 19, 17, 18, 8, 9, 8, 9, 10, 11, 10, 11, 12, 11, 12, 13, 12, 13, 12, 13, 11, 12, 13, 13, 14, 13, 14, 13, 12, 11, 12, 13, 12, 13, 12, 13, 14, 13, 9, 10, 11, 10, 11, 12, 11, 12, 13, 12, 13, 12, 13, 11, 12, 13, 13, 14, 13, 14, 13, 12, 11, 12, 13, 12, 13, 12, 13, 14, 13, 13, 14, 9, 10, 11, 10, 11, 12, 11, 12, 13, 12, 13, 12, 13, 11, 12, 13, 13, 14, 13, 14, 13, 12, 11, 12, 13, 12, 13, 12, 13, 8, 9, 8, 9, 9, 8, 9, 9, 10, 10, 8, 9, 5, 6, 7, 8, 6, 6, 7, 8, 9, 7, 8, 9, 10, 11, 9, 10, 11, 10, 8, 9, 10, 11, 9, 10, 11, 10, 8, 9, 10, 11, 9, 10, 11, 10, 6, 7, 8, 9, 9, 7, 8, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 6, 6, 6, 7, 7, 8, 9, 9, 10, 10, 3, 4, 3, 3, 4, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 5, 5, 4, 3, 2, 2, 2, 3, 4, 5, 4, 5, 4, 5, 4, 5, 3, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 2, 2, 2, 2, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 5, 6, 6, 6, 7, 7, 5, 6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2]
print(max(list))